// Generated by gencpp from file drawbot/Custom.msg
// DO NOT EDIT!


#ifndef DRAWBOT_MESSAGE_CUSTOM_H
#define DRAWBOT_MESSAGE_CUSTOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drawbot
{
template <class ContainerAllocator>
struct Custom_
{
  typedef Custom_<ContainerAllocator> Type;

  Custom_()
    : motor_r(0.0)
    , motor_l(0.0)
    , change(false)  {
    }
  Custom_(const ContainerAllocator& _alloc)
    : motor_r(0.0)
    , motor_l(0.0)
    , change(false)  {
  (void)_alloc;
    }



   typedef float _motor_r_type;
  _motor_r_type motor_r;

   typedef float _motor_l_type;
  _motor_l_type motor_l;

   typedef uint8_t _change_type;
  _change_type change;





  typedef boost::shared_ptr< ::drawbot::Custom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drawbot::Custom_<ContainerAllocator> const> ConstPtr;

}; // struct Custom_

typedef ::drawbot::Custom_<std::allocator<void> > Custom;

typedef boost::shared_ptr< ::drawbot::Custom > CustomPtr;
typedef boost::shared_ptr< ::drawbot::Custom const> CustomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drawbot::Custom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drawbot::Custom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drawbot::Custom_<ContainerAllocator1> & lhs, const ::drawbot::Custom_<ContainerAllocator2> & rhs)
{
  return lhs.motor_r == rhs.motor_r &&
    lhs.motor_l == rhs.motor_l &&
    lhs.change == rhs.change;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drawbot::Custom_<ContainerAllocator1> & lhs, const ::drawbot::Custom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drawbot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drawbot::Custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drawbot::Custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drawbot::Custom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drawbot::Custom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drawbot::Custom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drawbot::Custom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drawbot::Custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b3086714753979f6aef080bf1f3ae63";
  }

  static const char* value(const ::drawbot::Custom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b3086714753979fULL;
  static const uint64_t static_value2 = 0x6aef080bf1f3ae63ULL;
};

template<class ContainerAllocator>
struct DataType< ::drawbot::Custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drawbot/Custom";
  }

  static const char* value(const ::drawbot::Custom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drawbot::Custom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 motor_r\n"
"float32 motor_l\n"
"bool change\n"
;
  }

  static const char* value(const ::drawbot::Custom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drawbot::Custom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_r);
      stream.next(m.motor_l);
      stream.next(m.change);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Custom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drawbot::Custom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drawbot::Custom_<ContainerAllocator>& v)
  {
    s << indent << "motor_r: ";
    Printer<float>::stream(s, indent + "  ", v.motor_r);
    s << indent << "motor_l: ";
    Printer<float>::stream(s, indent + "  ", v.motor_l);
    s << indent << "change: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.change);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRAWBOT_MESSAGE_CUSTOM_H
