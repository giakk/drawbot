// Generated by gencpp from file drawbot/Data_arduino.msg
// DO NOT EDIT!


#ifndef DRAWBOT_MESSAGE_DATA_ARDUINO_H
#define DRAWBOT_MESSAGE_DATA_ARDUINO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drawbot
{
template <class ContainerAllocator>
struct Data_arduino_
{
  typedef Data_arduino_<ContainerAllocator> Type;

  Data_arduino_()
    : ref_speed_r(0.0)
    , ref_speed_l(0.0)
    , mesu_speed_r(0.0)
    , mesu_speed_l(0.0)
    , controller_speed_r(0.0)
    , controller_speed_l(0.0)
    , err_speed_r(0.0)
    , err_speed_l(0.0)
    , err_sum_speed_r(0.0)
    , err_sum_speed_l(0.0)
    , time_of_measure(0.0)  {
    }
  Data_arduino_(const ContainerAllocator& _alloc)
    : ref_speed_r(0.0)
    , ref_speed_l(0.0)
    , mesu_speed_r(0.0)
    , mesu_speed_l(0.0)
    , controller_speed_r(0.0)
    , controller_speed_l(0.0)
    , err_speed_r(0.0)
    , err_speed_l(0.0)
    , err_sum_speed_r(0.0)
    , err_sum_speed_l(0.0)
    , time_of_measure(0.0)  {
  (void)_alloc;
    }



   typedef float _ref_speed_r_type;
  _ref_speed_r_type ref_speed_r;

   typedef float _ref_speed_l_type;
  _ref_speed_l_type ref_speed_l;

   typedef float _mesu_speed_r_type;
  _mesu_speed_r_type mesu_speed_r;

   typedef float _mesu_speed_l_type;
  _mesu_speed_l_type mesu_speed_l;

   typedef float _controller_speed_r_type;
  _controller_speed_r_type controller_speed_r;

   typedef float _controller_speed_l_type;
  _controller_speed_l_type controller_speed_l;

   typedef float _err_speed_r_type;
  _err_speed_r_type err_speed_r;

   typedef float _err_speed_l_type;
  _err_speed_l_type err_speed_l;

   typedef float _err_sum_speed_r_type;
  _err_sum_speed_r_type err_sum_speed_r;

   typedef float _err_sum_speed_l_type;
  _err_sum_speed_l_type err_sum_speed_l;

   typedef float _time_of_measure_type;
  _time_of_measure_type time_of_measure;





  typedef boost::shared_ptr< ::drawbot::Data_arduino_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drawbot::Data_arduino_<ContainerAllocator> const> ConstPtr;

}; // struct Data_arduino_

typedef ::drawbot::Data_arduino_<std::allocator<void> > Data_arduino;

typedef boost::shared_ptr< ::drawbot::Data_arduino > Data_arduinoPtr;
typedef boost::shared_ptr< ::drawbot::Data_arduino const> Data_arduinoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drawbot::Data_arduino_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drawbot::Data_arduino_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drawbot::Data_arduino_<ContainerAllocator1> & lhs, const ::drawbot::Data_arduino_<ContainerAllocator2> & rhs)
{
  return lhs.ref_speed_r == rhs.ref_speed_r &&
    lhs.ref_speed_l == rhs.ref_speed_l &&
    lhs.mesu_speed_r == rhs.mesu_speed_r &&
    lhs.mesu_speed_l == rhs.mesu_speed_l &&
    lhs.controller_speed_r == rhs.controller_speed_r &&
    lhs.controller_speed_l == rhs.controller_speed_l &&
    lhs.err_speed_r == rhs.err_speed_r &&
    lhs.err_speed_l == rhs.err_speed_l &&
    lhs.err_sum_speed_r == rhs.err_sum_speed_r &&
    lhs.err_sum_speed_l == rhs.err_sum_speed_l &&
    lhs.time_of_measure == rhs.time_of_measure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drawbot::Data_arduino_<ContainerAllocator1> & lhs, const ::drawbot::Data_arduino_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drawbot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drawbot::Data_arduino_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drawbot::Data_arduino_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drawbot::Data_arduino_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drawbot::Data_arduino_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drawbot::Data_arduino_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drawbot::Data_arduino_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drawbot::Data_arduino_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ea41ce24b57574c9a377aecfc3f65a6";
  }

  static const char* value(const ::drawbot::Data_arduino_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ea41ce24b57574cULL;
  static const uint64_t static_value2 = 0x9a377aecfc3f65a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::drawbot::Data_arduino_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drawbot/Data_arduino";
  }

  static const char* value(const ::drawbot::Data_arduino_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drawbot::Data_arduino_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ref_speed_r\n"
"float32 ref_speed_l\n"
"float32 mesu_speed_r\n"
"float32 mesu_speed_l\n"
"float32 controller_speed_r\n"
"float32 controller_speed_l\n"
"float32 err_speed_r\n"
"float32 err_speed_l\n"
"float32 err_sum_speed_r\n"
"float32 err_sum_speed_l\n"
"float32 time_of_measure\n"
;
  }

  static const char* value(const ::drawbot::Data_arduino_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drawbot::Data_arduino_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ref_speed_r);
      stream.next(m.ref_speed_l);
      stream.next(m.mesu_speed_r);
      stream.next(m.mesu_speed_l);
      stream.next(m.controller_speed_r);
      stream.next(m.controller_speed_l);
      stream.next(m.err_speed_r);
      stream.next(m.err_speed_l);
      stream.next(m.err_sum_speed_r);
      stream.next(m.err_sum_speed_l);
      stream.next(m.time_of_measure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Data_arduino_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drawbot::Data_arduino_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drawbot::Data_arduino_<ContainerAllocator>& v)
  {
    s << indent << "ref_speed_r: ";
    Printer<float>::stream(s, indent + "  ", v.ref_speed_r);
    s << indent << "ref_speed_l: ";
    Printer<float>::stream(s, indent + "  ", v.ref_speed_l);
    s << indent << "mesu_speed_r: ";
    Printer<float>::stream(s, indent + "  ", v.mesu_speed_r);
    s << indent << "mesu_speed_l: ";
    Printer<float>::stream(s, indent + "  ", v.mesu_speed_l);
    s << indent << "controller_speed_r: ";
    Printer<float>::stream(s, indent + "  ", v.controller_speed_r);
    s << indent << "controller_speed_l: ";
    Printer<float>::stream(s, indent + "  ", v.controller_speed_l);
    s << indent << "err_speed_r: ";
    Printer<float>::stream(s, indent + "  ", v.err_speed_r);
    s << indent << "err_speed_l: ";
    Printer<float>::stream(s, indent + "  ", v.err_speed_l);
    s << indent << "err_sum_speed_r: ";
    Printer<float>::stream(s, indent + "  ", v.err_sum_speed_r);
    s << indent << "err_sum_speed_l: ";
    Printer<float>::stream(s, indent + "  ", v.err_sum_speed_l);
    s << indent << "time_of_measure: ";
    Printer<float>::stream(s, indent + "  ", v.time_of_measure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRAWBOT_MESSAGE_DATA_ARDUINO_H
